c
CSV.open(file_path, "w"){|f| f << [:id, :title, :content]}
CSV.open(file_path, "w+")
self.destroy(Post)
CSV.open(file_path, "w+") { |csv| csv << [:id, :title, :content] }
CSV.open(file_path, "w+") { |csv| csv << table_headers }
CSV.open(file_path, "w+") do |csv|
CSV.open(file_path, "w+")
self.destroy(Post)
CSV.open(file_path, "w+", headers: "id,title,content")
CSV.open(file_path, "w+", headers: ["id", "title", "content"])
self.destroy(Post)
self
CSV.open(file_path, "w+", headers: [:id, :title, :content])
CSV.new(file_path, "w+", headers: [:id, :title, :content])
c
row
row[:key]
key
c
params
table.each{|row| p row}
table
c
row[:title]="Vovan"
row
c
row[:title]="Vovan"
table
row
c
attributes
attributes[:created_at] = Time.parse(attributes[:created_at])
attributes[:created_at]
attributes = find_row(id).to_hash
find_row(id).to_hash
attributes
c
row.to_hash
row.headers
row.fields
row.field(:title)
row.field(:id)
row.id
row.parse
row = table.find{ |row| row[:id] == 1 }
table.find{ |row| row[:id] == 1 }
table.find{ |row| row['id'] == '1' }
table.find{ |row| row['id'] == 1 }
table = fetch_table
c
params[:title]
params.has_key?(:title)
params.has_key?(::title)
self.class.props
params
c
@instance.send(:id)
props
@instance
params
c
params + {created_at: Time.now}
params < {created_at: Time.now}
params
params[:id] = new_id(table)
params[id:] = new_id(table)
params
params.merge(id: new_id(table), created_at: Time.now, updated_at: Time.now)
params
c
params.merge(id: new_id(table), created_at: Time.now, updated_at: Time.now)
params
props
c
args
@attributes
c
r
r[:id] = 1
r.each{|e| puts e}
r.each{|e| p e}
r.each{|e| p e.inspect}
r.each{|e| puts e.inspect}
r.each{|e| e.inspect}
r.each{|e| p e}
r.class
r.count
r[:id]
r = CSV::Row.new(csv.headers,[],false)
r = CSV::Row.new(csv.headers,params,false)
params
id
csv.headers
csv
table_headers
file_path
c
params
exit
csv.find_all{ |row| row[:id] == "2" }
csv.find_all{ |row| row.inspect }
c
csv.find_all{ |row| row.inspect }
csv.find_all{ |row| row[:id] == "2" }
csv.find_all{ |row| row[:id] == "1" }
csv.find_all.read()
csv.read()
csv.first
csv.is_a?
csv.find_all
csv.entries
csv.closed?
csv.readlines
csv.methods
csv
c
csv.find {|row| row['id'] == '1'}
c
csv.find {|row| row['id'] == '1'}
puts csv.find {|row| row['id'] == '1'}
puts csv.find {|row| row['NAME'] == 'Tom'}
csv.readlines()
csv.read()
csv.shift()
c
csv.shift()
csv.return_headers?()
csv.readlines()
csv.read()
csv.inspect()
csv.table
csv.read
csv.parse
csv.first
csv.lineno
csv.count
csv.readlines.size
csv.readlines.row_count
csv.count
csv.readlines
c
csv.readlines
csv
csv.count
c
csv.count
csv.lineno
c
csv << hash.first.values
hash = [{id: csv.count, title: "hello world", content: "privet", created_at: Time.now, updated_at: Time.now}]
csv << hash.first.values
hash = [{id: csv.count, title: "hello world", content: "privet", created_at: Time.now, updated_at: Time.now}]
csv << hash.first.values
hash = [{id: csv.count, title: "hello world", content: "privet", created_at: Time.now, updated_at: Time.now}]
hash = {id: csv.count, title: "hello world", content: "privet", created_at: Time.now, updated_at: Time.now}
csv << "id:csv.count,title:'hello world',content:'privet',created_at:Time.now,updated_at:Time.now"
csv << "id:csv.count,title:"hello world",content:"privet",created_at:Time.now,updated_at:Time.now"
csv << id:csv.count,title:"hello world",content:"privet",created_at:Time.now,updated_at:Time.now
csv << id:csv.count, title:"hello world", content:"privet", created_at:Time.now, updated_at:Time.now
csv << id: csv.count, title: "hello world", content: "privet", created_at: Time.now, updated_at: Time.now
row = CSV::Row.new(csv.shift, {id: csv.count, title: "hello world", content: "privet", created_at: Time.now, updated_at: Time.now})
row = CSV::Row.new(id: csv.count, title: "hello world", content: "privet", created_at: Time.now, updated_at: Time.now)
csv.count
csv << [csv.readlines.size + 1, "hello world", "privet", Time.now, Time.now]
csv.readlines
csv.readlines.size
csv.row_count
csv.read.row_count
csv.read
csv.shift
csv
csv.headers
c
csv.class
csv.readline
csv.readline(1)
csv.inspect
csv.header_row?
csv.header_row?("id")
csv.headers
c
csv.headers
csv.methods
csv
def meth
de
